/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFrame;

import DAO.BangDiemDanhDAO;
import DAO.MonHocDAO;
import DAO.SinhVienDAO;
import DAO.ThoiKhoaBieuDAO;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import pojo.Bangdiemdanh;
import pojo.BangdiemdanhId;
import pojo.Monhoc;
import pojo.Sinhvien;
import pojo.Thoikhoabieu;
import pojo.ThoikhoabieuId;

/**
 *
 * @author Gokki
 */
public class JSinhVien extends javax.swing.JFrame {

    /**
     * Creates new form JSinhVien
     */
    private static Sinhvien sinhvien = null;

    private static DefaultComboBoxModel dcm = null;
    private static DefaultComboBoxModel dcm2 = null;

    private static DefaultTableModel dtm = null;
    private static int index_of_CMH3 = -1;
    private static int index_of_CMH = -1;

    public JSinhVien(Sinhvien sv) throws ClassNotFoundException {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(JSinhVien.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        sinhvien = sv;
        tbxMSSV.setText(sv.getMssv());
        tbxHoVaTenSV.setText(sv.getTenSv());
        setLocationRelativeTo(null);

        LoadDSMonHoc();

        cbxChonMonHoc.setModel(dcm);
        cbxChonMonHoc.setSelectedIndex(-1);

        cbxCMH2.setModel(dcm2);
        cbxCMH2.setSelectedIndex(-1);

        dtm = (DefaultTableModel) tblXemKQDiemDanh.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        tbxMSSV = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        tbxHoVaTenSV = new javax.swing.JTextField();
        btnlogout = new javax.swing.JButton();
        btnDoiPass = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnDiemDanh = new javax.swing.JButton();
        cbxChonMonHoc = new javax.swing.JComboBox<>();
        tbxdisplayMH = new javax.swing.JTextField();
        btnXemMH = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cbxCMH2 = new javax.swing.JComboBox<>();
        tbxdisplayMonHoc2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblXemKQDiemDanh = new javax.swing.JTable();

        setTitle("Chuong Trinh Diem Danh");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Tài Khoản Đăng Nhập", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Mã Số Sinh Viên");

        tbxMSSV.setEditable(false);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Họ và Tên");

        tbxHoVaTenSV.setEditable(false);

        btnlogout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnlogout.setText("Đăng Xuất");
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });

        btnDoiPass.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDoiPass.setText("Đổi Mật Khẩu");
        btnDoiPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoiPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbxMSSV, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbxHoVaTenSV, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDoiPass)
                .addGap(18, 18, 18)
                .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tbxMSSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbxHoVaTenSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(btnlogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDoiPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Điểm Danh", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Chọn Môn Điểm Danh:");

        btnDiemDanh.setText("Điểm Danh");
        btnDiemDanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiemDanhActionPerformed(evt);
            }
        });

        cbxChonMonHoc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxChonMonHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxChonMonHocActionPerformed(evt);
            }
        });

        tbxdisplayMH.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnXemMH.setText("Xem Chi Tiết");
        btnXemMH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemMHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(cbxChonMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(tbxdisplayMH, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(btnXemMH, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDiemDanh, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxChonMonHoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbxdisplayMH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXemMH)
                    .addComponent(btnDiemDanh))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Xem Kết Quả Điểm Danh", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Chọn Môn Học");

        cbxCMH2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxCMH2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCMH2ActionPerformed(evt);
            }
        });

        tbxdisplayMonHoc2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tblXemKQDiemDanh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblXemKQDiemDanh.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tuần", "Vắng", "Có Mặt", "Chưa Có Dữ Liệu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblXemKQDiemDanh);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxCMH2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(tbxdisplayMonHoc2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbxCMH2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbxdisplayMonHoc2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void LoadDSMonHoc() {

        List<Bangdiemdanh> ds = BangDiemDanhDAO.GetBDDBySinhVien(sinhvien);
        dcm = new DefaultComboBoxModel();
        dcm2 = new DefaultComboBoxModel();
        for (Bangdiemdanh d : ds) {
            dcm.addElement(d.getMonhoc().getMaMh());
            dcm2.addElement(d.getMonhoc().getMaMh());
        }

    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            JLogin jlg = new JLogin();
            jlg.setLocationRelativeTo(null);
            jlg.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JSinhVien.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowClosing

    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlogoutActionPerformed
        this.setVisible(false);
        try {
            JLogin jjj = new JLogin();
            jjj.setVisible(true);
            jjj.show(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JGiaoVu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnlogoutActionPerformed

    private void btnDoiPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoiPassActionPerformed
        String mkc = sinhvien.getPassword();
        DlgDoiMatKhauSinhVien d = new DlgDoiMatKhauSinhVien(this, true, sinhvien);
        d.setLocationRelativeTo(null);
        d.setModal(true);
        d.setVisible(true);

        if (mkc.compareTo(sinhvien.getPassword()) == 0) {
            return;
        }
        if (SinhVienDAO.UpdateSinhVien(sinhvien)) {
            JOptionPane.showMessageDialog(this, "Cập nhật thành công");
            if (tbxHoVaTenSV.getText().isEmpty()) {
                tbxHoVaTenSV.setText(sinhvien.getTenSv());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại");
        }
    }//GEN-LAST:event_btnDoiPassActionPerformed

    private void btnXemMHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemMHActionPerformed
        if (cbxChonMonHoc.getSelectedIndex() != -1) {
            Monhoc mh = MonHocDAO.getMonHocByMaMH(cbxChonMonHoc.getItemAt(cbxChonMonHoc.getSelectedIndex()));
            ThoikhoabieuId tkbid = new ThoikhoabieuId(mh.getMaMh(), mh.getTenMh());
            Thoikhoabieu tkb = ThoiKhoaBieuDAO.GetTKBByTKBId(tkbid);
            String ChiTietMH = "Mã Môn Học: " + mh.getMaMh() + "\r\n"
                    + "Tên Môn Học: " + mh.getTenMh() + "\r\n"
                    + "Ngày Bắt Đầu: " + tkb.getNgayBatDau().toString() + "\r\n"
                    + "Ngày Kết Thúc: " + tkb.getNgayKetThuc().toString() + "\r\n"
                    + "Giờ Bắt Đầu: " + tkb.getGioBatDau() + "\r\n"
                    + "Giờ Kết Thúc: " + tkb.getGioKetThuc() + "\r\n"
                    + "Thứ Trong Tuần: " + tkb.getThuTrongTuan() + "\r\n"
                    + "Phòng Học: " + tkb.getTenPhongHoc() + "\r\n";

            JOptionPane.showMessageDialog(null, ChiTietMH);

        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn môn học");
            return;
        }
    }//GEN-LAST:event_btnXemMHActionPerformed

    public void RefreshDiemDanhtbl() {
        int rows = tblXemKQDiemDanh.getRowCount();
        while (rows > 0) {
            dtm.removeRow(0);
            rows--;
        }
        tblXemKQDiemDanh.repaint();
    }

    public static void LoadTableKetQua(String MaMH) {
        BangdiemdanhId bddid = new BangdiemdanhId(MaMH, sinhvien.getMssv());
        Bangdiemdanh bdd = BangDiemDanhDAO.getBDDByID(bddid);

        Thoikhoabieu tkb = ThoiKhoaBieuDAO.GetTKBByTKBId(new ThoikhoabieuId(MaMH, MonHocDAO.getMonHocByMaMH(MaMH).getTenMh()));
        LocalDate ld = LocalDate.now();
        Date d = new Date(ld.getYear() - 1900, ld.getMonthValue() - 1, ld.getDayOfMonth());

        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();

        c1.setTime(d); // ngày hiện tại khi điểm danh
        c2.setTime(tkb.getNgayBatDau()); // ngày bắt đầu môn học

        long distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // số ngày
        distant /= 7;
        if (distant > 15) {
            distant = 15;
        }
        distant += 1;

        String strtcm = bdd.getTuanCoMat();
        if (strtcm == null || strtcm.isEmpty() || strtcm.compareTo("") == 0) {
            //  Các tuần có dữ liệu 
            for (int i = 1; i < distant; i++) {
                dtm.addRow(new Object[]{
                    "Tuần " + i, true, false, false
                });
            }
        } else {  // có ngày đã đi học
            String tcms[] = strtcm.split(",");
            int size = tcms.length; // số ngày đã đi học
            for (int i = 0; i < distant; i++) { // duyệt qua số dòng tương ứng các tuần
                dtm.addRow(new Object[]{
                    "Tuần " + i, true, false, false // chèn dòng
                });
                for (int j = 0; j < size; j++) { // số ngày đã đi học
                    if (i == Integer.valueOf(tcms[j])) { // tuần hiện tại đã đi học
                        dtm.setValueAt(true, i, 2);
                        dtm.setValueAt(false, i, 1);
                        
                    }
                }
            }
        }
        for (long i = distant; i < 16; i++) {
            dtm.addRow(new Object[]{
                "Tuần " + i, false, false, true
            });
        }
    }

    private void cbxCMH2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCMH2ActionPerformed
        if (cbxCMH2.getSelectedIndex() != -1) {
            String Mamh = (String) cbxCMH2.getSelectedItem(); // lấy mã môn học
            Monhoc mh = MonHocDAO.getMonHocByMaMH(Mamh); // tạo môn học theo mã trên
            tbxdisplayMonHoc2.setText(mh.getTenMh()); //
            if (cbxCMH2.getSelectedIndex() != index_of_CMH3) {
                index_of_CMH3 = cbxCMH2.getSelectedIndex(); // lấy chỉ số môn đang chọn
                Dlgloading d = new Dlgloading(this, true);
                d.setModal(true);
                Thread t = new Thread() {
                    public void run() {
                        RefreshDiemDanhtbl();

                        LoadTableKetQua(Mamh);

                        SwingUtilities.invokeLater(new Runnable() {//do swing work on EDT
                            public void run() {
                                d.dispose();
                            }
                        });
                    }

                };
                t.start();
                d.setVisible(true);
            }
        }
    }//GEN-LAST:event_cbxCMH2ActionPerformed

    private void cbxChonMonHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxChonMonHocActionPerformed
        if (cbxChonMonHoc.getSelectedIndex() != -1) {
            if (cbxChonMonHoc.getSelectedIndex() != index_of_CMH) {
                index_of_CMH = cbxChonMonHoc.getSelectedIndex(); // lấy chỉ số môn đang chọn
                String Mamh = (String) cbxChonMonHoc.getSelectedItem(); // lấy mã môn học
                Monhoc mh = MonHocDAO.getMonHocByMaMH(Mamh); // tạo môn học theo mã trên
                tbxdisplayMH.setText(mh.getTenMh()); //
            }

        }
    }//GEN-LAST:event_cbxChonMonHocActionPerformed

    private void btnDiemDanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiemDanhActionPerformed
        if (cbxChonMonHoc.getSelectedIndex() != -1) {
            LocalTime t = LocalTime.now();

            LocalDate ld = LocalDate.now();
            Date d = new Date(ld.getYear() - 1900, ld.getMonthValue() - 1, ld.getDayOfMonth());

            int h = t.getHour();
            int p = t.getMinute();
            int n = ld.getDayOfWeek().getValue();

            String Mamh = (String) cbxChonMonHoc.getSelectedItem();
            String Tenmh = tbxdisplayMH.getText();

            ThoikhoabieuId tkbid = new ThoikhoabieuId(Mamh, Tenmh);

            Thoikhoabieu tkb = ThoiKhoaBieuDAO.GetTKBByTKBId(tkbid);

            BangdiemdanhId bddid = new BangdiemdanhId(Mamh, tbxMSSV.getText());

            Bangdiemdanh bdd = BangDiemDanhDAO.getBDDByID(bddid);
            String tuancomat = bdd.getTuanCoMat();

            Calendar c1 = Calendar.getInstance();
            Calendar c2 = Calendar.getInstance();

            c1.setTime(d); // ngày hiện tại khi điểm danh
            c2.setTime(tkb.getNgayBatDau()); // ngày bắt đầu môn học

            String gbd[] = tkb.getGioBatDau().split(":");
            String gkt[] = tkb.getGioKetThuc().split(":");
            String thu[] = tkb.getThuTrongTuan().split(" ");
            long distant;
            if (thu[0].compareTo("Chủ") == 0) { // nếu là chủ nhật trong thời khóa biểu
                if (n == 7) { // xem thử hôm nay phải cn không
                    if (h > Integer.valueOf(gbd[0]) && h < Integer.valueOf(gkt[0])) {
                        if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                            tuancomat = "";
                            distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                            distant /= 7;
                            if (distant > 15) {
                                JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                return;
                            } else {
                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                }
                            }

                        } else {
                            distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                            distant /= 7; // lấy số tuần
                            if (distant > 15) { // hết thời hạn học
                                JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                return;
                            }
                            String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                            for (String st : arr) {
                                if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                    JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                    return;
                                }
                            }

                            tuancomat = (tuancomat + String.valueOf(distant) + ",");
                            bdd.setTuanCoMat(tuancomat);
                            if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                            }
                        }

                    } else if (h == Integer.valueOf(gbd[0])) {
                        if (p > Integer.valueOf(gbd[1])) {
                            if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                                tuancomat = "";
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                                distant /= 7;
                                if (distant > 15) {
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                } else {
                                    tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                    bdd.setTuanCoMat(tuancomat);
                                    if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                        JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                    }
                                }

                            } else {
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                                distant /= 7; // lấy số tuần
                                if (distant > 15) { // hết thời hạn học
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                }
                                String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                                for (String st : arr) {
                                    if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                        JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                        return;
                                    }
                                }

                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                                }
                            }
                        }
                    } else if (h == Integer.valueOf(gkt[0])) {
                        if (p < Integer.valueOf(gkt[1])) {
                            if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                                tuancomat = "";
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                                distant /= 7;
                                if (distant > 15) {
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                } else {
                                    tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                    bdd.setTuanCoMat(tuancomat);
                                    if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                        JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                    }
                                }

                            } else {
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                                distant /= 7; // lấy số tuần
                                if (distant > 15) { // hết thời hạn học
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                }
                                String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                                for (String st : arr) {
                                    if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                        JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                        return;
                                    }
                                }

                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Hiện tại không phải thời gian điểm danh");
                    return;
                }
            } else { // ngày thường
                if (n == (Integer.valueOf(thu[1]) - 1)) { // so sánh ngày hiện tại với ngày trong tkb
                    if (h > Integer.valueOf(gbd[0]) && h < Integer.valueOf(gkt[0])) {
                        if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                            tuancomat = "";
                            distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                            distant /= 7;
                            if (distant > 15) {
                                JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                return;
                            } else {
                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                }
                            }

                        } else {
                            distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                            distant /= 7; // lấy số tuần
                            if (distant > 15) { // hết thời hạn học
                                JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                return;
                            }
                            String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                            for (String st : arr) {
                                if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                    JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                    return;
                                }
                            }

                            tuancomat = (tuancomat + String.valueOf(distant) + ",");
                            bdd.setTuanCoMat(tuancomat);
                            if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                            }
                        }

                    } else if (h == Integer.valueOf(gbd[0])) {
                        if (p > Integer.valueOf(gbd[1])) {
                            if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                                tuancomat = "";
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                                distant /= 7;
                                if (distant > 15) {
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                } else {
                                    tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                    bdd.setTuanCoMat(tuancomat);
                                    if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                        JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                    }
                                }

                            } else {
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                                distant /= 7; // lấy số tuần
                                if (distant > 15) { // hết thời hạn học
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                }
                                String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                                for (String st : arr) {
                                    if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                        JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                        return;
                                    }
                                }

                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                                }
                            }
                        }
                    } else if (h == Integer.valueOf(gkt[0])) {
                        if (p < Integer.valueOf(gkt[1])) {
                            if (tuancomat == null || tuancomat.isEmpty() || tuancomat.compareTo("") == 0) {
                                tuancomat = "";
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000);
                                distant /= 7;
                                if (distant > 15) {
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                } else {
                                    tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                    bdd.setTuanCoMat(tuancomat);
                                    if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                        JOptionPane.showMessageDialog(this, "Điểm danh thành công");

                                    }
                                }

                            } else {
                                distant = (c1.getTime().getTime() - c2.getTime().getTime()) / (24 * 3600 * 1000); // lấy số ngày khoảng cách
                                distant /= 7; // lấy số tuần
                                if (distant > 15) { // hết thời hạn học
                                    JOptionPane.showMessageDialog(this, "Đã hết hạn điểm danh");
                                    return;
                                }
                                String arr[] = tuancomat.split(","); // kiếm tra đã điểm danh chưa
                                for (String st : arr) {
                                    if (st.compareTo(String.valueOf(distant)) == 0) { // đã điểm danh
                                        JOptionPane.showMessageDialog(this, "Bạn đã điểm danh trước đó");
                                        return;
                                    }
                                }

                                tuancomat = (tuancomat + String.valueOf(distant) + ",");
                                bdd.setTuanCoMat(tuancomat);
                                if (BangDiemDanhDAO.UpdateBDD(bdd)) {
                                    JOptionPane.showMessageDialog(this, "Điểm danh thành công");
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Hiện tại không phải thời gian điểm danh");
                    return;
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn môn học");
            return;
        }

    }//GEN-LAST:event_btnDiemDanhActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JSinhVien.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JSinhVien.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JSinhVien.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JSinhVien.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new JSinhVien(sinhvien).setVisible(true);

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(JSinhVien.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDiemDanh;
    private javax.swing.JButton btnDoiPass;
    private javax.swing.JButton btnXemMH;
    private javax.swing.JButton btnlogout;
    private javax.swing.JComboBox<String> cbxCMH2;
    private javax.swing.JComboBox<String> cbxChonMonHoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblXemKQDiemDanh;
    private javax.swing.JTextField tbxHoVaTenSV;
    private javax.swing.JTextField tbxMSSV;
    private javax.swing.JTextField tbxdisplayMH;
    private javax.swing.JTextField tbxdisplayMonHoc2;
    // End of variables declaration//GEN-END:variables
}
